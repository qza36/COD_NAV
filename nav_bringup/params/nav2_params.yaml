bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: chassis_fake
    odom_topic: /Odometry
    bt_loop_duration: 5
    default_server_timeout: 10
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 30.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.3
      movement_time_allowance: 10.0
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 6.28
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 56  #是指在每个控制周期内，控制器将生成的轨迹点数。
      model_dt: 0.05  #是指控制器的时间步长，值越小，控制器越精确，但计算量也越大。
      batch_size: 2000 #控制器的采样数。
      vx_std: 0.2 #控制器的线速度标准差, 用于生成随机噪声。复杂环境下，可以适当增大。
      vy_std: 0.3
      wz_std: 0.25
      vx_max: 2.0 #控制器的线速度最大值。
      vx_min: -2.0 #控制器的线速度最小值。
      vy_max: 2.0 #控制器的侧向速度最大值。
      wz_max: 2.0 #控制器的角速度最大值。
      ax_max: 2.0 #控制器的线加速度最大值。
      ax_min: -2.0 #控制器的线加速度最小值。
      ay_max: 2.0 #控制器的侧向加速度最大值。
      az_max: 2.0 #控制器的角加速度最大值。
      iteration_count: 1 #控制器的迭代次数。
      prune_distance: 2.0 #控制器的轨迹剪枝距离。
      transform_tolerance: 0.1 #控制器的变换容忍度, 用于判断是否需要重新计算轨迹，值越大，越容易重新计算。
      temperature: 0.3 #控制器的温度。
      gamma: 0.015 #控制器的 gamma 值,
      motion_model: "Omni" #控制器的运动模型。
      visualize: true #是否可视化。
      reset_period: 0.1 # (only in Humble)
      retry_attempt_limit: 1 #软重置的尝试次数
      regenerate_noises: true
      TrajectoryVisualizer:
        trajectory_step: 5 #是指在可视化轨迹时，每隔多少个轨迹点绘制一个点。
        time_step: 3 #是指在可视化轨迹时，每隔多少个时间步长绘制一个点。
      AckermannConstraints:
        min_turning_r: 0.35
      critics: [ "ConstraintCritic", "CostCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic" , "ObstaclesCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.0 # 考虑的阈值,和速度有关，值越大，速度越慢
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.5
      PreferForwardCritic:
        enabled: false
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.5
      ObstaclesCritic: #障碍物
         enabled: false
         cost_power: 1
         repulsion_weight: 1.5
         critical_weight: 10.0
         consider_footprint: false
         collision_cost: 10000.0
         collision_margin_distance: 0.1
         near_goal_distance: 0.5
         inflation_radius: 0.55 # (only in Humble)
         cost_scaling_factor: 10.0 # (only in Humble)
      CostCritic: #代价，用于计算代价，代价越大，越不容易选择
        enabled: true
        cost_power: 1
        cost_weight: 3.81
        critical_cost: 50.0 #临界代价
        consider_footprint: true
        collision_cost: 1000000.0 #碰撞代价
        near_goal_distance: 0.01 #距离目标的距离,更改这个值会影响到达目标的速度，值越大，速度越慢
        trajectory_point_step: 2 #轨迹点步长
      PathAlignCritic: #路径对齐
        enabled: true
        cost_power: 1
        cost_weight: 10.0 # 代价权重
        max_path_occupancy_ratio: 0.5
        trajectory_point_step: 1 #轨迹点步长
        threshold_to_consider: 0.5 # 考虑的阈值
        offset_from_furthest: 20
        use_path_orientations: false #是否使用路径方向
      PathFollowCritic: #是否跟随路径
        enabled: true
        cost_power: 1
        cost_weight: 10.0 # 代价权重
        offset_from_furthest: 5 # 距离最远点的偏移量
        threshold_to_consider: 0.4 # 考虑的阈值
      PathAngleCritic: #路径角度
        enabled: false
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.2
        max_angle_to_furthest: 1.0
        mode: 0
      # VelocityDeadbandCritic: #速度死区
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 35.0
      #   deadband_velocities: [0.05, 0.05, 0.05]
      # TwirlingCritic:
      #   enabled: true
      #   twirling_cost_power: 1
      #   twirling_cost_weight: 10.0
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 20.0
      publish_frequency: 20.0
      global_frame: map
      robot_base_frame: chassis_fake
      use_sim_time: False
      rolling_window: true
      width: 8
      height: 8
      resolution: 0.05
      robot_radius: 0.3
      plugins: ["obstacle_layer","inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 5.0
        inflation_radius: 0.3
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.5
          obstacle_max_range: 10.0
          obstacle_min_range: 0.5

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 20.0
      publish_frequency: 20.0
      global_frame: map
      robot_base_frame: chassis_fake
      use_sim_time: False
      robot_radius: 0.25
      resolution: 0.04
      track_unknown_space: true
      plugins: ["static_layer","obstacle_layer","inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.5
          obstacle_max_range: 10.0
          obstacle_min_range: 0.5
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 5.0
        inflation_radius: 0.3
      always_send_full_costmap: True

map_server:
  ros__parameters:
    use_sim_time: False
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: "/home/cod-sentry/qza_ws/cod_nav"

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    use_sim_time: true
    expected_planner_frequency: 10.0
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      tolerance: 0.5                      # 如果无法到达精确位置的规划容差，单位：米
      allow_unknown: true                 # 允许在未知空间中行驶
      downsample_costmap: false           # 是否对地图进行下采样
      downsampling_factor: 1              # 代价地图层分辨率的倍数 (e.g. 2 on a 5cm costmap would be 10cm)
      max_iterations: 1000000             # 搜索的最大总迭代次数（如果无法到达），设置为-1以禁用
      max_on_approach_iterations: 1000    # 一旦在容差范围内，尝试到达目标的最大迭代次数
      max_planning_time: 3.5              # 规划、平滑和上采样的最大时间（秒）。将根据规划后的剩余时间缩放最大平滑和上采样时间。
      cost_travel_multiplier: 2.0         # For 2D: 应用于搜索的代价乘数，以避开高代价区域。较大的值将更精确地放置在通道的中心（如果存在非“FREE”代价势场），但计算时间稍长。为了优化速度，1.0是合理的值。合理的折衷值是2.0。0.0的值有效地禁用避开障碍物的功能，像一个简单的二进制搜索A*。
      motion_model_for_search: "DUBIN"    # For Hybrid Dubin, Redds-Shepp
      angle_quantization_bins: 64         # For Hybrid nodes: 搜索的角度桶数，对于2D节点必须为1（无角度搜索）
      analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: 在搜索过程中尝试解析扩展的比例，用于最终接近。
      analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: 解析扩展被认为有效的最大长度，以防止不安全的捷径（单位：米）。这应该与最小转弯半径成比例，不应小于最小半径的4-5倍。
      minimum_turning_radius: 0.05        # For Hybrid/Lattice nodes: 路径/车辆的最小转弯半径，单位：米
      retrospective_penalty: 0.025        # For Hybrid/Lattice nodes: 优先考虑路径上较晚的机动而不是较早的机动。节省搜索时间，因为较早的节点不会被扩展，直到有必要。必须 >= 0.0且 <= 1.0
      reverse_penalty: 1.0                # For Reeds-Shepp model: 应用于倒车的惩罚，必须 >= 1
      change_penalty: 0.0                 # For Hybrid nodes: 应用于改变方向的惩罚，必须 >= 0
      non_straight_penalty: 1.20          # For Hybrid nodes: 应用于非直线运动的惩罚，必须 >= 1
      cost_penalty: 2.0                   # For Hybrid nodes: 在将更高代价区域添加到障碍物地图动态规划距离扩展启发式时应用的惩罚。这将驱动机器人更靠近通道的中心。1.3 - 3.5 之间的值是合理的。
      rotation_penalty: 5.0               # For Lattice node: 仅在使用包含原地旋转原语的最小控制集时应用于纯原地旋转命令的惩罚。除非严格必要用于避开障碍物，否则应始终设置足够高的权重，以避免此操作，否则可能会在路径中频繁出现不连续的情况，要求机器人原地旋转以节省路径距离。
      lookup_table_size: 20.0             # For Hybrid nodes: 缓存的dubin/reeds-sheep距离窗口的大小，单位：米。
      cache_obstacle_heuristic: True      # For Hybrid nodes: 在同一目标位置的后续重新规划之间缓存障碍物地图动态规划距离扩展启发式。如果代价地图基本静态，则显著加快重新规划性能（40倍）。
      allow_reverse_expansion: False      # For Lattice node: 是否在前向原语或反向扩展状态格子图中扩展，将使每一步的分支因子加倍。
      smooth_path: True                   # For Lattice/Hybrid nodes: 是否平滑路径，对于2D节点始终为 true。
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10
        do_refinement: true

smoother_server:
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 30.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: map
    robot_base_frame: chassis_fake
    transform_tolerance: 0.1
    use_sim_time: false
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    use_sim_time: False
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 30.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [2.0, 2.0, 2.0]
    min_velocity: [-2.0, -2.0, -2.0]
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0
    max_accel: [2.0, 2.0, 2.0]
    max_decel: [-2.0, -2.0, -2.0]
    odom_topic: "Odometry"
    odom_duration: 0.1
